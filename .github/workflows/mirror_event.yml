name: Mirror non-code activities to target repository

on:
  issues:
    types: [opened, edited, closed, reopened, labeled, unlabeled, assigned, unassigned]
  issue_comment:
    types: [created, edited, deleted]
  pull_request:
    types: [opened, edited, closed, reopened, labeled, unlabeled, synchronize, assigned, unassigned]
  pull_request_review:
    types: [submitted, edited, dismissed]
  pull_request_review_comment:
    types: [created, edited, deleted]
  label:
    types: [created, edited, deleted]
  milestone:
    types: [created, closed, opened, edited, deleted]
  discussion:
    types: [created, edited, deleted]
  discussion_comment:
    types: [created, edited, deleted]
  project:
    types: [created, closed, reopened, deleted]
  project_column:
    types: [created, updated, moved, deleted]
  project_card:
    types: [created, moved, converted, deleted]

jobs:
  mirror:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
      GH_BOT_ACC_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com
      GH_BOT_ACC_NAME: github-actions[bot]

    steps:
      - name: Checkout dummy
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y gh jq

      - name: Setup GitHub CLI
        run: |
          gh config set git_protocol https
          gh auth status

      - name: Mirror Non-Code Events
        env:
          GH_SOURCE_REPO: ${{ github.repository }}
          GH_TARGET_REPO: ${{ secrets.GH_TARGET_REPO }}
          GITHUB_EVENT_PATH: ${{ github.event_path }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
        run: |
          MAPPING_FILE="mirror_mapping.json"
          if [[ -f "$MAPPING_FILE" ]]; then
            MAPPING=$(cat "$MAPPING_FILE")
          else
            echo "{}" > "$MAPPING_FILE"
            MAPPING="{}"
          fi

          function update_mapping {
            jq --arg k "$1" --arg v "$2" '. + {($k): $v}' "$MAPPING_FILE" > tmp.json && mv tmp.json "$MAPPING_FILE"
          }

          EVENT_NAME="${GITHUB_EVENT_NAME}"
          EVENT_ACTION=$(jq -r .action < "$GITHUB_EVENT_PATH")
          echo "Event: $EVENT_NAME / Action: $EVENT_ACTION"

          # Helper to prefix bodies with author
          function prefix_body {
            local author="$1"
            local body="$2"
            echo "**[Mirrored from @$author]**"$'\n\n'"$body"
          }

          # ----------------------
          # Projects
          # ----------------------
          if [[ "$EVENT_NAME" == "project" ]]; then
            PROJECT_NAME=$(jq -r .project.name < "$GITHUB_EVENT_PATH")
            AUTHOR=$(jq -r .sender.login < "$GITHUB_EVENT_PATH")
            TARGET_PROJECT_ID=$(jq -r --arg name "$PROJECT_NAME" '.[$name] // empty' "$MAPPING_FILE")
            if [[ -z "$TARGET_PROJECT_ID" ]]; then
              TARGET_PROJECT_ID=$(gh api -X POST /repos/"$GH_TARGET_REPO"/projects -f name="$PROJECT_NAME" -H "Accept: application/vnd.github.inertia-preview+json" | jq -r .id)
              update_mapping "$PROJECT_NAME" "$TARGET_PROJECT_ID"
              echo "Created project $PROJECT_NAME (by @$AUTHOR) with ID $TARGET_PROJECT_ID"
            fi
          fi

          # ----------------------
          # Project Columns
          # ----------------------
          if [[ "$EVENT_NAME" == "project_column" ]]; then
            PROJECT_NAME=$(jq -r .project.name < "$GITHUB_EVENT_PATH")
            COLUMN_NAME=$(jq -r .project_column.name < "$GITHUB_EVENT_PATH")
            AUTHOR=$(jq -r .sender.login < "$GITHUB_EVENT_PATH")
            TARGET_PROJECT_ID=$(jq -r --arg name "$PROJECT_NAME" '.[$name] // empty' "$MAPPING_FILE")
            if [[ -n "$TARGET_PROJECT_ID" ]]; then
              TARGET_COLUMN_ID=$(gh api -X POST /projects/"$TARGET_PROJECT_ID"/columns -f name="$COLUMN_NAME" -H "Accept: application/vnd.github.inertia-preview+json" | jq -r .id)
              update_mapping "$PROJECT_NAME:$COLUMN_NAME" "$TARGET_COLUMN_ID"
              echo "Created column $COLUMN_NAME (by @$AUTHOR) in project $PROJECT_NAME"
            fi
          fi

          # ----------------------
          # Project Cards
          # ----------------------
          if [[ "$EVENT_NAME" == "project_card" ]]; then
            PROJECT_NAME=$(jq -r .project.name < "$GITHUB_EVENT_PATH")
            COLUMN_NAME=$(jq -r .project_column.name < "$GITHUB_EVENT_PATH")
            AUTHOR=$(jq -r .sender.login < "$GITHUB_EVENT_PATH")
            TARGET_COLUMN_ID=$(jq -r --arg k "$PROJECT_NAME:$COLUMN_NAME" '.[$k] // empty' "$MAPPING_FILE")
            if [[ -n "$TARGET_COLUMN_ID" ]]; then
              CARD_NOTE=$(jq -r .project_card.note < "$GITHUB_EVENT_PATH")
              gh api -X POST /projects/columns/"$TARGET_COLUMN_ID"/cards \
                -f note="$(prefix_body "$AUTHOR" "$CARD_NOTE")" \
                -H "Accept: application/vnd.github.inertia-preview+json"
              echo "Created card in column $COLUMN_NAME (by @$AUTHOR)"
            fi
          fi

          # ----------------------
          # Issues
          # ----------------------
          if [[ "$EVENT_NAME" == "issues" ]]; then
            AUTHOR=$(jq -r .issue.user.login < "$GITHUB_EVENT_PATH")
            ISSUE_TITLE=$(jq -r .issue.title < "$GITHUB_EVENT_PATH")
            ISSUE_BODY=$(jq -r .issue.body < "$GITHUB_EVENT_PATH")
            ISSUE_NUMBER=$(jq -r .issue.number < "$GITHUB_EVENT_PATH")
            MIRRORED_BODY=$(prefix_body "$AUTHOR" "$ISSUE_BODY")
            case "$EVENT_ACTION" in
              opened)
                gh issue create --repo "$GH_TARGET_REPO" --title "$ISSUE_TITLE" --body "$MIRRORED_BODY"
                ;;
              edited)
                gh issue edit "$ISSUE_NUMBER" --repo "$GH_TARGET_REPO" --title "$ISSUE_TITLE" --body "$MIRRORED_BODY"
                ;;
              closed)
                gh issue close "$ISSUE_NUMBER" --repo "$GH_TARGET_REPO"
                ;;
            esac
          fi

          # ----------------------
          # Issue Comments
          # ----------------------
          if [[ "$EVENT_NAME" == "issue_comment" ]]; then
            AUTHOR=$(jq -r .comment.user.login < "$GITHUB_EVENT_PATH")
            COMMENT_BODY=$(jq -r .comment.body < "$GITHUB_EVENT_PATH")
            ISSUE_NUMBER=$(jq -r .issue.number < "$GITHUB_EVENT_PATH")
            if [[ "$EVENT_ACTION" == "created" ]]; then
              gh issue comment "$ISSUE_NUMBER" --repo "$GH_TARGET_REPO" --body "$(prefix_body "$AUTHOR" "$COMMENT_BODY")"
            fi
          fi

          # ----------------------
          # Pull Requests
          # ----------------------
          if [[ "$EVENT_NAME" == "pull_request" ]]; then
            AUTHOR=$(jq -r .pull_request.user.login < "$GITHUB_EVENT_PATH")
            PR_TITLE=$(jq -r .pull_request.title < "$GITHUB_EVENT_PATH")
            PR_BODY=$(jq -r .pull_request.body < "$GITHUB_EVENT_PATH")
            PR_NUMBER=$(jq -r .pull_request.number < "$GITHUB_EVENT_PATH")
            MIRRORED_BODY=$(prefix_body "$AUTHOR" "$PR_BODY")
            case "$EVENT_ACTION" in
              opened)
                gh pr create --repo "$GH_TARGET_REPO" --title "$PR_TITLE" --body "$MIRRORED_BODY"
                ;;
              edited)
                gh pr edit "$PR_NUMBER" --repo "$GH_TARGET_REPO" --title "$PR_TITLE" --body "$MIRRORED_BODY"
                ;;
              closed)
                gh pr close "$PR_NUMBER" --repo "$GH_TARGET_REPO"
                ;;
            esac
          fi

          # ----------------------
          # Pull Request Reviews
          # ----------------------
          if [[ "$EVENT_NAME" == "pull_request_review" ]]; then
            PR_NUMBER=$(jq -r .pull_request.number < "$GITHUB_EVENT_PATH")
            AUTHOR=$(jq -r .review.user.login < "$GITHUB_EVENT_PATH")
            REVIEW_BODY=$(jq -r .review.body < "$GITHUB_EVENT_PATH")
            REVIEW_STATE=$(jq -r .review.state < "$GITHUB_EVENT_PATH" | tr '[:upper:]' '[:lower:]')
            if [[ "$EVENT_ACTION" == "submitted" ]]; then
              gh pr review "$PR_NUMBER" --repo "$GH_TARGET_REPO" \
                --body "$(prefix_body "$AUTHOR" "$REVIEW_BODY")" \
                --"$REVIEW_STATE"
            fi
          fi

          # ----------------------
          # Labels
          # ----------------------
          if [[ "$EVENT_NAME" == "label" ]]; then
            LABEL_NAME=$(jq -r .label.name < "$GITHUB_EVENT_PATH")
            AUTHOR=$(jq -r .sender.login < "$GITHUB_EVENT_PATH")
            case "$EVENT_ACTION" in
              created)
                gh label create "$LABEL_NAME" --repo "$GH_TARGET_REPO"
                echo "Label $LABEL_NAME created by @$AUTHOR"
                ;;
              deleted)
                gh label delete "$LABEL_NAME" --repo "$GH_TARGET_REPO"
                echo "Label $LABEL_NAME deleted by @$AUTHOR"
                ;;
            esac
          fi

          # ----------------------
          # Milestones
          # ----------------------
          if [[ "$EVENT_NAME" == "milestone" ]]; then
            AUTHOR=$(jq -r .sender.login < "$GITHUB_EVENT_PATH")
            MILESTONE_TITLE=$(jq -r .milestone.title < "$GITHUB_EVENT_PATH")
            if [[ "$EVENT_ACTION" == "created" ]]; then
              gh api -X POST /repos/"$GH_TARGET_REPO"/milestones -f title="$MILESTONE_TITLE"
              echo "Milestone $MILESTONE_TITLE created by @$AUTHOR"
            fi
          fi

          # ----------------------
          # Discussions
          # ----------------------
          if [[ "$EVENT_NAME" == "discussion" ]]; then
            AUTHOR=$(jq -r .discussion.user.login < "$GITHUB_EVENT_PATH")
            DISCUSSION_TITLE=$(jq -r .discussion.title < "$GITHUB_EVENT_PATH")
            DISCUSSION_BODY=$(jq -r .discussion.body < "$GITHUB_EVENT_PATH")
            if [[ "$EVENT_ACTION" == "created" ]]; then
              gh api -X POST /repos/"$GH_TARGET_REPO"/discussions \
                -f title="$DISCUSSION_TITLE" \
                -f body="$(prefix_body "$AUTHOR" "$DISCUSSION_BODY")"
            fi
          fi

          # ----------------------
          # Discussion Comments
          # ----------------------
          if [[ "$EVENT_NAME" == "discussion_comment" ]]; then
            AUTHOR=$(jq -r .comment.user.login < "$GITHUB_EVENT_PATH")
            COMMENT_BODY=$(jq -r .comment.body < "$GITHUB_EVENT_PATH")
            DISCUSSION_NUMBER=$(jq -r .discussion.number < "$GITHUB_EVENT_PATH")
            if [[ "$EVENT_ACTION" == "created" ]]; then
              gh api -X POST /repos/"$GH_TARGET_REPO"/discussions/"$DISCUSSION_NUMBER"/comments \
                -f body="$(prefix_body "$AUTHOR" "$COMMENT_BODY")"
            fi
          fi

          echo "Mirroring completed."
